{"ast":null,"code":"// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\nexport function bfs(grid,startNode,finishNode){var visitedNodesInOrder=[];var nextNodesStack=[startNode];while(nextNodesStack.length){var currentNode=nextNodesStack.shift();if(currentNode===finishNode)return visitedNodesInOrder;if(!currentNode.isWall&&(currentNode.isStart||!currentNode.isVisited)){currentNode.isVisited=true;visitedNodesInOrder.push(currentNode);var col=currentNode.col,row=currentNode.row;var nextNode=void 0;if(row>0){nextNode=grid[row-1][col];if(!nextNode.isVisited){nextNode.previousNode=currentNode;nextNodesStack.push(nextNode);}}if(row<grid.length-1){nextNode=grid[row+1][col];if(!nextNode.isVisited){nextNode.previousNode=currentNode;nextNodesStack.push(nextNode);}}if(col>0){nextNode=grid[row][col-1];if(!nextNode.isVisited){nextNode.previousNode=currentNode;nextNodesStack.push(nextNode);}}if(col<grid[0].length-1){nextNode=grid[row][col+1];if(!nextNode.isVisited){nextNode.previousNode=currentNode;nextNodesStack.push(nextNode);}}}}// return visitedNodesInOrder;\n}","map":{"version":3,"sources":["C:\\Users\\SAMRIDHI SAHU\\code\\PastWork\\code\\optimal path finder\\nodejs\\src\\algorithms\\bfs.js"],"names":["bfs","grid","startNode","finishNode","visitedNodesInOrder","nextNodesStack","length","currentNode","shift","isWall","isStart","isVisited","push","col","row","nextNode","previousNode"],"mappings":"AAAA;AACA;AACA;AAEA,MAAO,SAASA,CAAAA,GAAT,CAAaC,IAAb,CAAmBC,SAAnB,CAA8BC,UAA9B,CAA0C,CAC/C,GAAMC,CAAAA,mBAAmB,CAAG,EAA5B,CACA,GAAIC,CAAAA,cAAc,CAAG,CAACH,SAAD,CAArB,CACA,MAAOG,cAAc,CAACC,MAAtB,CAA8B,CAC5B,GAAMC,CAAAA,WAAW,CAAGF,cAAc,CAACG,KAAf,EAApB,CACA,GAAID,WAAW,GAAKJ,UAApB,CAAgC,MAAOC,CAAAA,mBAAP,CAEhC,GACE,CAACG,WAAW,CAACE,MAAb,GACCF,WAAW,CAACG,OAAZ,EAAuB,CAACH,WAAW,CAACI,SADrC,CADF,CAGE,CACAJ,WAAW,CAACI,SAAZ,CAAwB,IAAxB,CACAP,mBAAmB,CAACQ,IAApB,CAAyBL,WAAzB,EAFA,GAGOM,CAAAA,GAHP,CAGmBN,WAHnB,CAGOM,GAHP,CAGYC,GAHZ,CAGmBP,WAHnB,CAGYO,GAHZ,CAIA,GAAIC,CAAAA,QAAQ,OAAZ,CACA,GAAID,GAAG,CAAG,CAAV,CAAa,CACXC,QAAQ,CAAGd,IAAI,CAACa,GAAG,CAAG,CAAP,CAAJ,CAAcD,GAAd,CAAX,CACA,GAAI,CAACE,QAAQ,CAACJ,SAAd,CAAyB,CACvBI,QAAQ,CAACC,YAAT,CAAwBT,WAAxB,CACAF,cAAc,CAACO,IAAf,CAAoBG,QAApB,EACD,CACF,CACD,GAAID,GAAG,CAAGb,IAAI,CAACK,MAAL,CAAc,CAAxB,CAA2B,CACzBS,QAAQ,CAAGd,IAAI,CAACa,GAAG,CAAG,CAAP,CAAJ,CAAcD,GAAd,CAAX,CACA,GAAI,CAACE,QAAQ,CAACJ,SAAd,CAAyB,CACvBI,QAAQ,CAACC,YAAT,CAAwBT,WAAxB,CACAF,cAAc,CAACO,IAAf,CAAoBG,QAApB,EACD,CACF,CACD,GAAIF,GAAG,CAAG,CAAV,CAAa,CACXE,QAAQ,CAAGd,IAAI,CAACa,GAAD,CAAJ,CAAUD,GAAG,CAAG,CAAhB,CAAX,CACA,GAAI,CAACE,QAAQ,CAACJ,SAAd,CAAyB,CACvBI,QAAQ,CAACC,YAAT,CAAwBT,WAAxB,CACAF,cAAc,CAACO,IAAf,CAAoBG,QAApB,EACD,CACF,CACD,GAAIF,GAAG,CAAGZ,IAAI,CAAC,CAAD,CAAJ,CAAQK,MAAR,CAAiB,CAA3B,CAA8B,CAC5BS,QAAQ,CAAGd,IAAI,CAACa,GAAD,CAAJ,CAAUD,GAAG,CAAG,CAAhB,CAAX,CACA,GAAI,CAACE,QAAQ,CAACJ,SAAd,CAAyB,CACvBI,QAAQ,CAACC,YAAT,CAAwBT,WAAxB,CACAF,cAAc,CAACO,IAAf,CAAoBG,QAApB,EACD,CACF,CACF,CACF,CACD;AACD","sourcesContent":["// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function bfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  let nextNodesStack = [startNode];\r\n  while (nextNodesStack.length) {\r\n    const currentNode = nextNodesStack.shift();\r\n    if (currentNode === finishNode) return visitedNodesInOrder;\r\n\r\n    if (\r\n      !currentNode.isWall &&\r\n      (currentNode.isStart || !currentNode.isVisited)\r\n    ) {\r\n      currentNode.isVisited = true;\r\n      visitedNodesInOrder.push(currentNode);\r\n      const {col, row} = currentNode;\r\n      let nextNode;\r\n      if (row > 0) {\r\n        nextNode = grid[row - 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (row < grid.length - 1) {\r\n        nextNode = grid[row + 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col > 0) {\r\n        nextNode = grid[row][col - 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col < grid[0].length - 1) {\r\n        nextNode = grid[row][col + 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // return visitedNodesInOrder;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}